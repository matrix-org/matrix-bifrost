bridge:
  domain: "beefy"
  homeserverUrl: "http://localhost:8008"
  userPrefix: "_bifrost_"
  appservicePort: 6333

bridgeBot:
  displayname: "Bifrost"

roomRules: []

datastore:
  engine: "postgres"
  connectionString: "postgres://postgres:postgres@localhost/bifrost"

profile:
  updateInterval: 1

purple:
  backend: "node-purple"
  sendConnectionNotices: true
  defaultAccountSettings:
    prpl-sipe:
      server: sip.unstable.technology:5061
      encryption-policy: obey-server
      transport: tls
      useragent: UCCAPI/16.0.4849.1000 OC/16.0.4849.1000 (Skype for Business)
      authentication: auto
      sso: false
      dont-publish: true
  backendOpts:
    debugEnabled: true
    pluginsDir: "/usr/lib/purple-2"
    dataDir: "./purple-data"
    soloProtocol: "prpl-sipe"
    protocolOptions:
      prpl-sipe:
        usernameFormat: "%@unstable.technology,UNSTABLE\\%"


# # Matrix forwards room aliases join requests matching a regex in the
# # registration file to the owner's bridge, if the room doesn't exist.
# # The following options allow you to configure how the purple bridge may
# # match those aliases to remote rooms.
portals:
  # Enable gateway support for protocols that support them, e.g. xmpp.js
  enableGateway: false
  # List of regexes to match a alias that can be turned into a bridge.
  aliases:
    # This matches #_bifrost_ followed by anything
    "/^_bifrost_(.+)$/":
      # Use the xmpp-js protocol.
      protocol: "prpl-sipe"
      properties:
        # Set room to the first regex match
        room: "regex:1"
        # Set the server to be conf.localhost
        server: "regex:2"

metrics:
  enabled: true

provisioning:
  # Can users use ""!purple" in a room to bridge it to a group.
  enablePlumbing: false
  # Required power level to bridge a room into a group.
  requiredUserPL: 100

logging:
  console: "info" # "debug", "info", "warn", "error", "off"

# These are specific flags or values to tune the bridge to different setups.
# The defaults are usually fine, but adjust as needed.
tuning:
  # Do not send a message or join a room before setting a users profile for
  # the first time. This should help clients hide ugly mxids better behind
  # displaynames.
  waitOnProfileBeforeSend: true
  # A nasty hack to check the domain for conf* to see if the PM is coming from a MUC.
  # This is only really needed for legacy clients that don't implement xmlns.
  # This is specific to the XMPP.js bridge.
  # conferencePMFallbackCheck: false
  # Don't send messages from the remote protocol until we have seen them join.
  # A list of prefixes to check for a userId.
  # This is useful for talking to remote IRC users who might not see a message
  # until after they have joined.
  # waitOnJoinBeforePM: string[];
